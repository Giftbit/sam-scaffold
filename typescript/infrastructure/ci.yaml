AWSTemplateFormatVersion: 2010-09-09
Description: Continuous Integration for project

Parameters:
  ProjectName:
    Type: String
    Description: The name of the project being built.  This name will be used on a number of resources.
    Default: MyAwesomeProject
  ProjectParameterOverrides:
    Type: String
    Description: JSON string for the parameters of the project template.
    Default: "{}"
  GitHubOAuthToken:
    Type: String
    Description: GitHub oauth token.  This user must have admin access to the repo.
    Default: "****"
    NoEcho: true
  GitHubRepoOwner:
    Type: String
    Description: GitHub repo owner.
    Default: mycompany
  GitHubRepo:
    Type: String
    Description: GitHub git repo.
    Default: myreponame
  GitHubBranch:
    Type: String
    Description: Git branch to build off of.
    Default: master
  GitHubBranchDest:
    Type: String
    Description: Git branch to merge into after a successful deploy.  Leave empty for no action.
    Default: ""

Conditions:
  MergeAfterDeploy: !Not [!Equals [!Ref GitHubBranchDest, ""]]

Resources:
  # S3 bucket where build artifacts go
  DeploymentArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        # The guide recommends Enabled but I can't see why
        Status: Suspended

  # CodeBuild
  # Uncomment this block to enable a custom Docker image for CodeBuild.
#  CodeBuildDockerImageRepository:
#    Type: AWS::ECR::Repository
#    Properties:
#      RepositoryPolicyText:
#        Version: 2012-10-17
#        Statement:
#          - Sid: CodeBuildAccess
#            Effect: Allow
#            Principal:
#              AWS:
#                # internal AWS account IDs used by AWS CodeBuild to access Amazon ECR repositories in supported AWS regions
#                # see: http://docs.aws.amazon.com/codebuild/latest/userguide/sample-ecr.html
#                - arn:aws:iam::201349592320:root
#                - arn:aws:iam::570169269855:root
#                - arn:aws:iam::964771811575:root
#            Action:
#              - ecr:GetDownloadUrlForLayer
#              - ecr:BatchGetImage
#              - ecr:BatchCheckLayerAvailability
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codebuild.amazonaws.com
  CodeBuildServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildServicePolicy
      Roles:
        - !Ref CodeBuildServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*/*"
              - !Sub "arn:aws:s3:::${DeploymentArtifactBucket}/*"
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref ProjectName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        # ComputeType options: BUILD_GENERAL1_SMALL, BUILD_GENERAL1_MEDIUM, BUILD_GENERAL1_LARGE
        ComputeType: BUILD_GENERAL1_SMALL
        # aws/codebuild/nodejs:7.0.0 is a default image provided by CodeBuild.
        # You can enable using a custom image by uncommenting the CodeBuildDockerImageRepository
        # resource above, using the `Image: !Sub` variant below and then running
        # `ciDockerImage/build.sh` after this stack is created.
        Image: aws/codebuild/nodejs:7.0.0
        #Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${CodeBuildDockerImageRepository}:latest"
        EnvironmentVariables:
          - Name: BUILD_ARTIFACT_BUCKET
            Value: !Ref DeploymentArtifactBucket
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10

  # CodePipeline
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codepipeline.amazonaws.com
  CodePipelineServicePolicy:
    # This policy orchestrates CloudFormation and CodeBuild.
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodePipelineServicePolicy
      Roles:
        - !Ref CodePipelineServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${DeploymentArtifactBucket}/*"
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DescribeStacks
              - cloudformation:DeleteStack
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ValidateTemplate
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectName}/*"
          - Effect: Allow
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:StopBuild
            Resource: !GetAtt CodeBuildProject.Arn
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt CloudFormationServiceRole.Arn
          - !If
            - MergeAfterDeploy
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt GithubPusherFunction.Arn
            - !Ref AWS::NoValue
          - !If
            - MergeAfterDeploy
            - Effect: Allow
              Action:
                - lambda:ListFunctions
              Resource: "*"
            - !Ref AWS::NoValue
  CloudFormationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - cloudformation.amazonaws.com
  CloudFormationServicePolicy:
    # This policy deloys the project's SAM template and needs permissions to create all services defined there.
    # A number of common blocks are provided as examples.
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudFormationServicePolicy
      Roles:
        - !Ref CloudFormationServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - cloudformation:CreateChangeSet
              - cloudformation:ListChangeSets
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:aws:transform/*"
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*/*"
              - !Sub "arn:aws:s3:::${DeploymentArtifactBucket}/*"
          - Effect: Allow
            Action:
              - iam:AttachRolePolicy
              - iam:CreateRole
              - iam:DeleteRole
              - iam:DeleteRolePolicy
              - iam:DetachRolePolicy
              - iam:GetRole
              - iam:PassRole
              - iam:PutRolePolicy
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-*"
          - Effect: Allow
            Action:
              - lambda:AddPermission
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:GetFunction
              - lambda:GetFunctionConfiguration
              - lambda:InvokeFunction
              - lambda:RemovePermission
              - lambda:UpdateFunctionCode
              - lambda:UpdateFunctionConfiguration
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-*"
          # This block is necessary for any event mapping
          - Effect: Allow
            Action:
              - lambda:CreateEventSourceMapping
              - lambda:DeleteEventSourceMapping
              - lambda:GetEventSourceMapping
            Resource: "*"
          # Kinesis stream event mapping
#          - Effect: Allow
#            Action:
#              - kinesis:DescribeStreams
#              - kinesis:DescribeStream
#              - kinesis:ListStreams
#              - kinesis:GetShardIterator
#              - kinesis:GetRecords
#            Resource: !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/*"
          # DynamoBD event mapping
#          - Effect: Allow
#            Action:
#              - dynamodb:DescribeStreams
#              - dynamodb:DescribeStream
#              - dynamodb:ListStreams
#              - dynamodb:GetShardIterator
#              - dynamodb:GetRecords
#            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
          # Manage DynamoDB tables
#          - Effect: Allow
#            Action:
#              - dynamodb:*
#            Resource: !Sub "arn:aws:apigateway:${AWS::Region}::/*"
          # Manage API Gateway resources
          - Effect: Allow
            Action:
              - apigateway:*
            Resource: !Sub "arn:aws:apigateway:${AWS::Region}::/*"
          # Manage ElasticsearchService resources
#          - Effect: Allow
#            Action:
#              - es:*
#            Resource: "*"
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceCodeOutputArtifact
              Configuration:
                Owner: !Ref GitHubRepoOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceCodeOutputArtifact
              OutputArtifacts:
                - Name: BuildOutputArtifact
              Configuration:
                ProjectName: !Ref ProjectName
              RunOrder: 1
        - Name: Release
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              InputArtifacts:
                - Name: BuildOutputArtifact
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Ref ProjectName
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                Capabilities: CAPABILITY_IAM
                StackName: !Ref ProjectName
                ParameterOverrides: !Ref ProjectParameterOverrides
                TemplatePath: BuildOutputArtifact::SamDeploymentTemplate.yaml
              RunOrder: 1
            - Name: ApprovalForRelease
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              RunOrder: 2
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                StackName: !Ref ProjectName
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Ref ProjectName
              RunOrder: 3
            - !If
              - MergeAfterDeploy
              - Name: GithubMerge
                ActionTypeId:
                  Category: Invoke
                  Owner: AWS
                  Version: 1
                  Provider: Lambda
                Configuration:
                  FunctionName: !Ref GithubPusherFunction
                RunOrder: 4
              - !Ref AWS::NoValue
      ArtifactStore:
        Type: S3
        Location: !Ref DeploymentArtifactBucket
      Name: !Ref ProjectName

  # GithubPusher pushes from the built branch to the dest branch.
  # see: https://github.com/Giftbit/lambda-github-pusher
  GithubPusherServiceRole:
    Condition: MergeAfterDeploy
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
  GithubPusherServicePolicy:
    Condition: MergeAfterDeploy
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GithubPusherServicePolicy
      Roles:
        - !Ref GithubPusherServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - kms:decrypt
            Resource: !GetAtt StackKey.Arn
          - Effect: Allow
            Action:
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
            Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
  GithubPusherFunction:
    Condition: MergeAfterDeploy
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt GithubPusherServiceRole.Arn
      Code:
        S3Bucket: giftbit-public-resources
        S3Key: cloudformation/lambda-github-pusher/2017-01-31.zip
      Runtime: nodejs4.3
      Timeout: 120
      Environment:
        Variables:
          GITHUB_REPO_OWNER: !Ref GitHubRepoOwner
          GITHUB_REPO: !Ref GitHubRepo
          GITHUB_SOURCE_BRANCH: !Ref GitHubBranch
          GITHUB_DEST_BRANCH: !Ref GitHubBranchDest
          GITHUB_OAUTH: !GetAtt EncryptedGitHubOAuthToken.CipherText

  # Encrypts the GitHub oauth token for GithubPusher above
  StackKey:
    Condition: MergeAfterDeploy
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "KMS Key used for storing the secrets involved in ${ProjectName} CI"
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
  StackKeyAlias:
    Condition: MergeAfterDeploy
    Type: AWS::KMS::Alias
    Properties:
      AliasName:
        !Sub "alias/${AWS::StackName}-Key"
      TargetKeyId:
        !GetAtt StackKey.Arn
  EncryptionLambdaRole:
    Condition: MergeAfterDeploy
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
  EncryptionLambdaRolePolicy:
    Condition: MergeAfterDeploy
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EncryptionLambda
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:DescribeKey
              - kms:GenerateDataKey
            Resource: !GetAtt StackKey.Arn
      Roles:
        - !Ref EncryptionLambdaRole
  EncryptionLambda:
    Condition: MergeAfterDeploy
    Type: AWS::Lambda::Function
    DependsOn: EncryptionLambdaRolePolicy
    Properties:
      Description: Backs a CloudFormation Custom Resource for encypting values with a specified KMS Key
      Role: !GetAtt EncryptionLambdaRole.Arn
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      Timeout: 15
      Code:
        S3Bucket: giftbit-public-resources
        S3Key: cloudformation/lambda-backed-cloud-formation-kms-encryption/lambda/20170102-1440.zip
  EncryptedGitHubOAuthToken:
    Condition: MergeAfterDeploy
    Type: AWS::CloudFormation::CustomResource
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt EncryptionLambda.Arn
      KeyId: !GetAtt StackKey.Arn
      PlainText: !Ref GitHubOAuthToken
