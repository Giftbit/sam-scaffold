AWSTemplateFormatVersion: 2010-09-09
Description: Continuous Integration for project

Parameters:
  ProjectName:
    Type: String
    Description: The name of the project being built.  This name will be used on a number of resources.
    Default: MyAwesomeProject
  ProjectParameterOverrides:
    Type: String
    Description: JSON string for the parameters of the project template.
    Default: "{}"
  GitHubOAuthToken:
    Type: String
    Description: GitHub oauth token.  This user must have admin access to the repo.
    Default: "****"
    NoEcho: true
  GitHubRepoOwner:
    Type: String
    Description: GitHub repo owner.
    Default: mycompany
  GitHubRepo:
    Type: String
    Description: GitHub git repo.
    Default: myreponame
  GitHubBranch:
    Type: String
    Description: Git branch to build off of.
    Default: master
  GitHubBranchDest:
    Type: String
    Description: Git branch to pull request into after a successful deploy.  Leave empty for no action.
    Default: ""

Conditions:
  PullRequestAfterDeploy: !Not [!Equals [!Ref GitHubBranchDest, ""]]

Resources:
  # S3 bucket where build artifacts go
  DeploymentArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        # The guide recommends Enabled but I can't see why
        Status: Suspended

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codebuild.amazonaws.com
  CodeBuildServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildServicePolicy
      Roles:
        - !Ref CodeBuildServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*/*"
              - !Sub "arn:aws:s3:::${DeploymentArtifactBucket}/*"
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref ProjectName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        # ComputeType options: BUILD_GENERAL1_SMALL, BUILD_GENERAL1_MEDIUM, BUILD_GENERAL1_LARGE
        ComputeType: BUILD_GENERAL1_SMALL
        # Run `aws codebuild list-curated-environment-images` for a complete list of images provided.
        Image: aws/codebuild/nodejs:10
        EnvironmentVariables:
          - Name: BUILD_ARTIFACT_BUCKET
            Value: !Ref DeploymentArtifactBucket
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10

  # CodePipeline
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codepipeline.amazonaws.com
  CodePipelineServicePolicy:
    # This policy orchestrates CloudFormation and CodeBuild.
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodePipelineServicePolicy
      Roles:
        - !Ref CodePipelineServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${DeploymentArtifactBucket}/*"
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DescribeStacks
              - cloudformation:DeleteStack
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ValidateTemplate
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectName}/*"
          - Effect: Allow
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:StopBuild
            Resource: !GetAtt CodeBuildProject.Arn
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt CloudFormationServiceRole.Arn
          - !If
            - PullRequestAfterDeploy
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt GitHubActionFunction.Arn
            - !Ref AWS::NoValue
          - !If
            - PullRequestAfterDeploy
            - Effect: Allow
              Action:
                - lambda:ListFunctions
              Resource: "*"
            - !Ref AWS::NoValue
  CloudFormationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - cloudformation.amazonaws.com
  CloudFormationServicePolicy:
    # This policy deloys the project's SAM template and needs permissions to create all services defined there.
    # A number of common blocks are provided as examples.
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudFormationServicePolicy
      Roles:
        - !Ref CloudFormationServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - cloudformation:CreateChangeSet
              - cloudformation:ListChangeSets
            Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:aws:transform/*"
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*/*"
              - !Sub "arn:aws:s3:::${DeploymentArtifactBucket}/*"
          - Effect: Allow
            Action:
              - iam:AttachRolePolicy
              - iam:CreateRole
              - iam:DeleteRole
              - iam:DeleteRolePolicy
              - iam:DetachRolePolicy
              - iam:GetRole
              - iam:PassRole
              - iam:PutRolePolicy
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-*"
          - Effect: Allow
            Action:
              - lambda:AddPermission
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:GetFunction
              - lambda:GetFunctionConfiguration
              - lambda:InvokeFunction
              - lambda:RemovePermission
              - lambda:TagResource
              - lambda:UntagResource
              - lambda:UpdateFunctionCode
              - lambda:UpdateFunctionConfiguration
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-*"
          # This block is necessary for any event mapping
          - Effect: Allow
            Action:
              - lambda:CreateEventSourceMapping
              - lambda:DeleteEventSourceMapping
              - lambda:GetEventSourceMapping
            Resource: "*"
          # Lambda tagging
          - Effect: Allow
            Action:
              - lambda:ListTags
              - lambda:TagResource
              - lambda:UntagResource
            Resource: "*"
          # API Gateway (REST events)
#          - Effect: Allow
#            Action:
#              - apigateway:*
#            Resource: !Sub "arn:aws:apigateway:${AWS::Region}::/*"
          # CloudWatch event triggers
#          - Effect: Allow
#            Action:
#              - events:DeleteRule
#              - events:DescribeRule
#              - events:DisableRule
#              - events:EnableRule
#              - events:PutRule
#              - events:PutTargets
#              - events:RemoveTargets
#            Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${ProjectName}-*"
          # Kinesis stream event mapping
#          - Effect: Allow
#            Action:
#              - kinesis:DescribeStreams
#              - kinesis:DescribeStream
#              - kinesis:ListStreams
#              - kinesis:GetShardIterator
#              - kinesis:GetRecords
#            Resource: !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/*"
          # DynamoBD event mapping
#          - Effect: Allow
#            Action:
#              - dynamodb:DescribeStreams
#              - dynamodb:DescribeStream
#              - dynamodb:ListStreams
#              - dynamodb:GetShardIterator
#              - dynamodb:GetRecords
#            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
          # DynamoDB tables
#          - Effect: Allow
#            Action:
#              - dynamodb:CreateTable
#              - dynamodb:DeleteTable
#              - dynamodb:DescribeTable
#              - dynamodb:DescribeTimeToLive
#              - dynamodb:ListTagsOfResource
#              - dynamodb:TagResource
#              - dynamodb:UntagResource
#              - dynamodb:UpdateTable
#              - dynamodb:UpdateTimeToLive
#            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProjectName}-*"
          # DynamoDB table tagging
#          - Effect: Allow
#            Action:
#              - dynamodb:ListTags
#              - dynamodb:TagResource
#              - dynamodb:UntagResource
#            Resource: "*"
          # DynamoDB autoscaling
#          - Effect: Allow
#            Action:
#              - application-autoscaling:*
#            Resource: *
          # S3
#          - Effect: Allow
#            Action:
#              - s3:CreateBucket
#              - s3:GetBucketAcl
#              - s3:GetBucketNotification
#              - s3:GetBucketTagging
#              - s3:PutBucketAcl
#              - s3:PutBucketNotification
#              - s3:PutBucketTagging
#            Resource: "*"
          # SQS
#          - Effect: Allow
#            Action:
#              - sqs:AddPermission
#              - sqs:CreateQueue
#              - sqs:DeleteQueue
#              - sqs:GetQueueAttributes
#              - sqs:RemovePermission
#              - sqs:SetQueueAttributes
#            Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${ProjectName}-*"
          # ElasticsearchService
#          - Effect: Allow
#            Action:
#              - es:*
#            Resource: "*"
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceCodeOutputArtifact
              Configuration:
                Owner: !Ref GitHubRepoOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceCodeOutputArtifact
              OutputArtifacts:
                - Name: BuildOutputArtifact
              Configuration:
                ProjectName: !Ref ProjectName
              RunOrder: 1
        - Name: Release
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              InputArtifacts:
                - Name: BuildOutputArtifact
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Ref ProjectName
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                Capabilities: CAPABILITY_IAM
                StackName: !Ref ProjectName
                ParameterOverrides: !Ref ProjectParameterOverrides
                TemplatePath: BuildOutputArtifact::SamDeploymentTemplate.yaml
              RunOrder: 1
            - Name: ApprovalForRelease
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              RunOrder: 2
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                StackName: !Ref ProjectName
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Ref ProjectName
              RunOrder: 3
        - !If
          - PullRequestAfterDeploy
          - Name: PostRelease
            Actions:
              - Name: GitHubPullRequest
                ActionTypeId:
                  Category: Invoke
                  Owner: AWS
                  Version: 1
                  Provider: Lambda
                Configuration:
                  FunctionName: !Ref GitHubActionFunction
                RunOrder: 1
          - !Ref AWS::NoValue
      ArtifactStore:
        Type: S3
        Location: !Ref DeploymentArtifactBucket
      Name: !Ref ProjectName

  # GitHubAction pushes from the built branch to the dest branch.
  # see: https://github.com/Giftbit/lambda-github-pusher
  GitHubActionServiceRole:
    Condition: PullRequestAfterDeploy
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: GitHubActionServicePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - kms:decrypt
                Resource: !GetAtt StackKey.Arn
              - Effect: Allow
                Action:
                  - codepipeline:AcknowledgeJob
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource: "*"
  GitHubActionFunction:
    Condition: PullRequestAfterDeploy
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt GitHubActionServiceRole.Arn
      Code:
        S3Bucket: lightrail-public-resources
        S3Key: cloudformation/codepipeline-github-action/2019-10-23.zip
      Runtime: nodejs10.x
      Timeout: 120
      Environment:
        Variables:
          GITHUB_REPO_OWNER: !Ref GitHubRepoOwner
          GITHUB_REPO: !Ref GitHubRepo
          GITHUB_SOURCE_BRANCH: !Ref GitHubBranch
          GITHUB_DEST_BRANCH: !Ref GitHubBranchDest
          GITHUB_OAUTH: !GetAtt EncryptedGitHubOAuthToken.CipherText

  # Encrypts the GitHub oauth token for GitHubAction above
  StackKey:
    Condition: PullRequestAfterDeploy
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "KMS Key used for storing the secrets involved in ${ProjectName} CI"
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
  StackKeyAlias:
    Condition: PullRequestAfterDeploy
    Type: AWS::KMS::Alias
    Properties:
      AliasName:
        !Sub "alias/${AWS::StackName}-Key"
      TargetKeyId:
        !GetAtt StackKey.Arn
  EncryptionLambdaRole:
    Condition: PullRequestAfterDeploy
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: EncryptionLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:DescribeKey
                  - kms:GenerateDataKey
                Resource: !GetAtt StackKey.Arn
  EncryptionLambda:
    Condition: PullRequestAfterDeploy
    Type: AWS::Lambda::Function
    Properties:
      Description: Backs a CloudFormation Custom Resource for encypting values with a specified KMS Key
      Role: !GetAtt EncryptionLambdaRole.Arn
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      Timeout: 15
      Code:
        S3Bucket: giftbit-public-resources
        S3Key: cloudformation/lambda-backed-cloud-formation-kms-encryption/lambda/20170810-1104.zip
  EncryptedGitHubOAuthToken:
    Condition: PullRequestAfterDeploy
    Type: AWS::CloudFormation::CustomResource
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt EncryptionLambda.Arn
      KeyId: !GetAtt StackKey.Arn
      PlainText: !Ref GitHubOAuthToken
